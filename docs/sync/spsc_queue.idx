SpscQueue	sync/spsc_queue.html#SpscQueue	spsc_queue: SpscQueue	
`=destroy`	sync/spsc_queue.html#=destroy,SpscQueue[T]	spsc_queue: `=destroy`[T](self: var SpscQueue[T])	
`=copy`	sync/spsc_queue.html#=copy,SpscQueue[T],SpscQueue[T]	spsc_queue: `=copy`[T](dest: var SpscQueue[T]; source: SpscQueue[T])	
init	sync/spsc_queue.html#init,SpscQueue[T],Natural	spsc_queue: init[T](self: var SpscQueue[T]; capacity: Natural)	
newSpscQueue	sync/spsc_queue.html#newSpscQueue,int	spsc_queue: newSpscQueue[T](cap: int): SpscQueue[T]	
cap	sync/spsc_queue.html#cap,SpscQueue[T]	spsc_queue: cap[T](self: SpscQueue[T]): int	
len	sync/spsc_queue.html#len,SpscQueue[T]	spsc_queue: len[T](self: SpscQueue[T]): int	
tryPush	sync/spsc_queue.html#tryPush,SpscQueue[T],Isolated[T]	spsc_queue: tryPush[T](self: var SpscQueue[T]; value: var Isolated[T]): bool	
tryPush	sync/spsc_queue.html#tryPush.t,SpscQueue[T],T	spsc_queue: tryPush[T](self: SpscQueue[T]; value: T): bool	
tryPop	sync/spsc_queue.html#tryPop,SpscQueue[T],T	spsc_queue: tryPop[T](self: var SpscQueue[T]; value: var T): bool	
